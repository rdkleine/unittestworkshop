@page "/"
@page "/employees"
@using LogicService.Dto;
@using LogicService;
@inject IEmployeeService employeeService
@inject NavigationManager navigateManager

<PageTitle>Overzicht werknemers</PageTitle>

<h1>Overzicht werknemers</h1>

<p>
    [todo]
    <ul>
        <li>Lijst met werkgevers</li>
        <li>Filter werknemers</li>
    </ul>
</p>

@if (employeeList == null)
{
    <p><em>Loading...</em></p>
}
else
{

<p>
    <form>
        <div class="form-group">
            <label for="employers">Werkgevers</label>
            <input type="text" @bind=@FilterFirstName class="form-control" id="firstname" placeholder="firstname">
        </div>
        <div class="form-group">
            <label for="filter">Filter</label>
            <input type="text" @bind=@FilterLastName class="form-control" id="lastname" placeholder="lastname">
        </div>        
        <button type="button" class="btn btn-primary" @onclick="Search">Zoeken</button>
        <button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>
    </form>
</p>
    <table class="table">
        <thead>
            <tr>
                <th>Action</th>
                <th>Name</th>
                <th>Birthdate</th>
                <th>Emailaddress</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employeeList)
            {
                <tr>
                    <td>
                        <button @onclick=@(e => DeleteEmployee(e, employee))>Delete</button>
                        <button @onclick=@(e => EditEmployee(e, employee))>Edit</button>
                    </td>
                    <td>@employee.FirstName @employee.LastName</td>
                    <td>@employee.BirthDate</td>
                    <td>@employee.EmailAddress</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Employee>? employeeList;
    private string? FilterFirstName;
    private string? FilterLastName;

    protected override async Task OnInitializedAsync()
    {
        employeeList = employeeService.GetList();
    }

    private void DeleteEmployee(MouseEventArgs e, Employee employee)
    {
        employeeService.Delete(employee.EmployeeId);
    }

    private void EditEmployee(MouseEventArgs e, Employee employee)
    {
        navigateManager.NavigateTo($"/employees/{employee.EmployeeId}");
    }

    private void Search()
    {
        employeeList = employeeService.SearchEmployees(FilterFirstName, FilterLastName);
    }

    private void Reset()
    {
        //clean form
    }
}
